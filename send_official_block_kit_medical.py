#!/usr/bin/env python3
"""
VIGIA Medical AI - Block Kit Oficial seg√∫n documentaci√≥n Slack
Usando la sintaxis correcta de Block Kit de api.slack.com
"""

import asyncio
import os
import sys
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

try:
    from slack_sdk import WebClient
    from slack_sdk.errors import SlackApiError
    SLACK_AVAILABLE = True
except ImportError:
    SLACK_AVAILABLE = False

async def send_official_block_kit_medical():
    """Enviar notificaciones m√©dicas con Block Kit oficial"""
    print("üèóÔ∏è VIGIA MEDICAL AI - BLOCK KIT OFICIAL")
    print("üìö Usando documentaci√≥n api.slack.com/reference/block-kit")
    print("=" * 60)
    
    if not SLACK_AVAILABLE:
        print("‚ùå Slack SDK no disponible")
        return False
    
    bot_token = os.getenv('SLACK_BOT_TOKEN')
    if not bot_token:
        print("‚ùå SLACK_BOT_TOKEN no configurado")
        return False
    
    client = WebClient(token=bot_token)
    channel = "#it_vigia"
    
    try:
        auth_test = client.auth_test()
        print(f"‚úÖ Bot conectado: {auth_test['user']}")
        
        # 1. Header + Section con fields (seg√∫n documentaci√≥n oficial)
        print("\nüèóÔ∏è 1. Sistema activado (Header + Section + Fields)...")
        
        blocks1 = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "ü©∫ VIGIA Medical AI - Sistema Activado"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*Sistema m√©dico completamente operacional*\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nüì± Canal: #it_vigia configurado para notificaciones m√©dicas"
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": "*ü§ñ Agentes Activos:*\n9 Agentes m√©dicos coordinados"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üîí Seguridad:*\nPHI Tokenization activo"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üè• Compliance:*\nHIPAA + NPUAP/EPUAP 2019"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üéØ Estado:*\nListo para producci√≥n m√©dica"
                    }
                ]
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": f"üîí Batman Token: `BATMAN_ACTIVATION_{datetime.now().strftime('%H%M%S')}` | VIGIA Medical AI"
                    }
                ]
            }
        ]
        
        result1 = client.chat_postMessage(
            channel=channel,
            blocks=blocks1,
            text="VIGIA Medical AI Sistema Activado"
        )
        
        if result1['ok']:
            print("‚úÖ Header + Section + Fields enviado")
        else:
            print(f"‚ùå Error: {result1}")
            
        await asyncio.sleep(3)
        
        # 2. Detecci√≥n LPP con bot√≥n de acci√≥n (Actions block)
        print("üèóÔ∏è 2. Detecci√≥n LPP (Section + Actions + Button)...")
        
        lpp_token = f"BATMAN_LPP_{datetime.now().strftime('%H%M%S')}"
        blocks2 = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "üö® Detecci√≥n LPP - Alerta M√©dica"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "*üî¥ Lesi√≥n por Presi√≥n Detectada*\n\n*Grado:* LPP Grado 2 (P√©rdida parcial del grosor de la piel)\n*Confianza:* 87.3%\n*Ubicaci√≥n:* Regi√≥n sacra\n*M√©todo:* MONAI + YOLOv5 Dual Detection"
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": "*üë®‚Äç‚öïÔ∏è Recomendaci√≥n:*\nProtocolo prevenci√≥n LPP inmediato"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*‚è±Ô∏è Redistribuci√≥n:*\nCada 2 horas"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üè• Especialista:*\nEn <4 horas"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üìã Evidencia:*\nNivel A (NPUAP/EPUAP)"
                    }
                ]
            },
            {
                "type": "actions",
                "elements": [
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "‚úÖ Protocolo Activado",
                            "emoji": True
                        },
                        "style": "primary",
                        "value": f"protocol_activated_{lpp_token}",
                        "action_id": "lpp_protocol_activated"
                    },
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "üë®‚Äç‚öïÔ∏è Llamar Especialista",
                            "emoji": True
                        },
                        "style": "danger",
                        "value": f"call_specialist_{lpp_token}",
                        "action_id": "call_lpp_specialist"
                    }
                ]
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": f"üîí Batman Token: `{lpp_token}` | Protocolo NPUAP/EPUAP 2019"
                    }
                ]
            }
        ]
        
        result2 = client.chat_postMessage(
            channel=channel,
            blocks=blocks2,
            text="Detecci√≥n LPP - Alerta M√©dica"
        )
        
        if result2['ok']:
            print("‚úÖ LPP con botones de acci√≥n enviado")
        else:
            print(f"‚ùå Error LPP: {result2}")
            
        await asyncio.sleep(3)
        
        # 3. An√°lisis de voz con divider
        print("üèóÔ∏è 3. An√°lisis de voz (Section + Divider)...")
        
        voice_token = f"BATMAN_VOICE_{datetime.now().strftime('%H%M%S')}"
        blocks3 = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "üéôÔ∏è An√°lisis de Voz M√©dica Completado"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "*üë§ Paciente:* Protegido con tokenizaci√≥n PHI\n*üó£Ô∏è An√°lisis:* Hume AI Expression API\n*‚è±Ô∏è Duraci√≥n:* 45 segundos procesados"
                }
            },
            {
                "type": "divider"
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": "*ü©∫ Nivel de dolor:*\nModerado-Alto (7/10)"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üò∞ Estr√©s detectado:*\nAnsiedad y tensi√≥n vocal"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üòü Estado emocional:*\nPreocupaci√≥n y malestar"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üìä Confianza:*\n91.8% an√°lisis"
                    }
                ]
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "*üíä Recomendaciones M√©dicas:*\n‚Ä¢ Evaluaci√≥n inmediata del nivel de dolor\n‚Ä¢ Considerar ajuste de medicaci√≥n analg√©sica\n‚Ä¢ Apoyo psicol√≥gico/emocional recomendado\n‚Ä¢ Re-evaluaci√≥n en 2 horas"
                }
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": f"üîí Batman Token: `{voice_token}` | Procesado por VoiceAnalysisAgent"
                    }
                ]
            }
        ]
        
        result3 = client.chat_postMessage(
            channel=channel,
            blocks=blocks3,
            text="An√°lisis de Voz M√©dica Completado"
        )
        
        if result3['ok']:
            print("‚úÖ An√°lisis de voz con divider enviado")
        else:
            print(f"‚ùå Error voz: {result3}")
            
        await asyncio.sleep(3)
        
        # 4. Coordinaci√≥n de equipo con m√∫ltiples botones
        print("üèóÔ∏è 4. Coordinaci√≥n equipo (Multiple Actions)...")
        
        team_token = f"BATMAN_TEAM_{datetime.now().strftime('%H%M%S')}"
        blocks4 = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "üë®‚Äç‚öïÔ∏è Coordinaci√≥n Equipo M√©dico Activada"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "*üö® Caso Cr√≠tico - Coordinaci√≥n Inmediata Requerida*\n\n*Prioridad:* CR√çTICA - LPP Grado 3 detectado\n*Tiempo de Respuesta:* 15 minutos m√°ximo\n*Protocolo:* NPUAP/EPUAP 2019 - Respuesta de emergencia"
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": "*ü©∫ Dr. Especialista LPP:*\nDermatolog√≠a convocado"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üë©‚Äç‚öïÔ∏è Enfermer√≠a:*\nCuidado de heridas especializado"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üèÉ‚Äç‚ôÇÔ∏è Fisioterapeuta:*\nMovilizaci√≥n paciente"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*ü•ó Nutricionista:*\nEvaluaci√≥n riesgo nutricional"
                    }
                ]
            },
            {
                "type": "actions",
                "elements": [
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "ü©∫ Dermatolog√≠a",
                            "emoji": True
                        },
                        "style": "primary",
                        "value": f"dermatology_{team_token}",
                        "action_id": "notify_dermatology"
                    },
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "üë©‚Äç‚öïÔ∏è Enfermer√≠a",
                            "emoji": True
                        },
                        "value": f"nursing_{team_token}",
                        "action_id": "notify_nursing"
                    },
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "üö® Emergencia",
                            "emoji": True
                        },
                        "style": "danger",
                        "value": f"emergency_{team_token}",
                        "action_id": "trigger_emergency"
                    }
                ]
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": f"üîí Batman Token: `{team_token}` | Communication Agent coordinando"
                    }
                ]
            }
        ]
        
        result4 = client.chat_postMessage(
            channel=channel,
            blocks=blocks4,
            text="Coordinaci√≥n Equipo M√©dico Activada"
        )
        
        if result4['ok']:
            print("‚úÖ Coordinaci√≥n con m√∫ltiples botones enviado")
        else:
            print(f"‚ùå Error coordinaci√≥n: {result4}")
            
        await asyncio.sleep(3)
        
        # 5. Resumen final con todos los elementos
        print("üèóÔ∏è 5. Resumen sistema (All Block Types)...")
        
        blocks5 = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "üìä RESUMEN SISTEMA VIGIA MEDICAL AI"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "*üéâ Todas las notificaciones Block Kit enviadas exitosamente!*"
                }
            },
            {
                "type": "divider"
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": "*üìà Notificaciones:*\n5 m√©dicas procesadas"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*üîí Batman Tokens:*\n5 generados"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*ü§ñ Agentes:*\n9 coordinados"
                    },
                    {
                        "type": "mrkdwn",
                        "text": "*‚úÖ Compliance:*\n100% HIPAA/NPUAP"
                    }
                ]
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "*üè• Capacidades Demostradas:*\n‚Ä¢ üñºÔ∏è Detecci√≥n autom√°tica de LPP\n‚Ä¢ üéôÔ∏è An√°lisis de voz para dolor/estr√©s\n‚Ä¢ üë®‚Äç‚öïÔ∏è Coordinaci√≥n autom√°tica de equipos\n‚Ä¢ üîí Protecci√≥n PHI con tokenizaci√≥n\n‚Ä¢ üìã Cumplimiento de guidelines m√©dicos"
                }
            },
            {
                "type": "actions",
                "elements": [
                    {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "üéØ Sistema Operacional",
                            "emoji": True
                        },
                        "style": "primary",
                        "value": "system_operational",
                        "action_id": "confirm_operational"
                    }
                ]
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": "üéØ VIGIA Medical AI completamente operacional en #it_vigia | Listo para deployment m√©dico"
                    }
                ]
            }
        ]
        
        result5 = client.chat_postMessage(
            channel=channel,
            blocks=blocks5,
            text="Resumen Sistema VIGIA Medical AI"
        )
        
        if result5['ok']:
            print("‚úÖ Resumen con todos los elementos enviado")
        else:
            print(f"‚ùå Error resumen: {result5}")
        
        # Summary
        results = [result1['ok'], result2['ok'], result3['ok'], result4['ok'], result5['ok']]
        successful = sum(results)
        
        print(f"\nüìä RESUMEN BLOCK KIT OFICIAL: {successful}/5 enviados")
        
        if successful == 5:
            print("üéâ ¬°TODOS LOS BLOCK KIT OFICIALES ENVIADOS!")
            print("üèóÔ∏è Usando sintaxis oficial de api.slack.com")
            print("üì± Verificar #it_vigia para componentes visuales")
            return True
        else:
            print(f"‚ö†Ô∏è {5-successful} fallaron")
            return False
            
    except SlackApiError as e:
        print(f"‚ùå Error Slack API: {e.response['error']}")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

async def main():
    """Ejecutar Block Kit oficial"""
    print("üöÄ INICIANDO BLOCK KIT OFICIAL SEG√öN DOCUMENTACI√ìN")
    print("üìö Basado en api.slack.com/reference/block-kit")
    print("=" * 60)
    
    success = await send_official_block_kit_medical()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ ¬°BLOCK KIT OFICIAL M√âDICO DESPLEGADO!")
        print("üèóÔ∏è Headers, Sections, Fields, Actions, Context, Dividers")
        print("üîò Botones interactivos m√©dicos funcionando")
        print("üì± Verificar #it_vigia para ver todos los componentes")
    else:
        print("‚ùå Algunos Block Kit fallaron")
    
    print("\nüìö ELEMENTOS BLOCK KIT OFICIALES USADOS:")
    print("   üìã Header blocks - T√≠tulos m√©dicos")
    print("   üìÑ Section blocks - Contenido estructurado")
    print("   üîò Actions blocks - Botones interactivos")
    print("   üìä Fields - Informaci√≥n en columnas")
    print("   ‚ûñ Divider blocks - Separaci√≥n visual")
    print("   üìù Context blocks - Informaci√≥n contextual")
    print("   üé® Syntax oficial api.slack.com")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())