#!/usr/bin/env python3
"""
VIGIA Medical AI - Pruebas Reales en Canal #it_vigia
Test del sistema m√©dico completo con Slack en producci√≥n
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path
import json
import logging

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.interfaces.slack_orchestrator import SlackOrchestrator
from src.messaging.slack_block_templates import VigiaMessageTemplates, MedicalBlockContext
from src.core.constants import LPPGrade
from src.agents.master_medical_orchestrator import MasterMedicalOrchestrator
from src.core.phi_tokenization_client import PHITokenizationClient

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class VigiaSlackRealTester:
    """Pruebas reales del sistema VIGIA Medical AI en Slack"""
    
    def __init__(self):
        self.slack_orchestrator = None
        self.message_templates = VigiaMessageTemplates()
        self.test_channel = "#it_vigia"  # Canal espec√≠fico para pruebas
        self.phi_client = PHITokenizationClient()
        
    async def initialize(self):
        """Initialize Slack orchestrator"""
        try:
            self.slack_orchestrator = SlackOrchestrator()
            await self.slack_orchestrator.initialize()
            logger.info("‚úÖ Slack orchestrator initialized successfully")
            return True
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Slack: {e}")
            return False
    
    async def test_basic_connection(self):
        """Test 1: Conexi√≥n b√°sica al canal #it_vigia"""
        print("\nüîó TEST 1: Conexi√≥n B√°sica al Canal #it_vigia")
        
        try:
            # Send basic connection test
            message = f"ü©∫ **VIGIA Medical AI - Sistema Activo**\n\n" \
                     f"‚è∞ Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n" \
                     f"üè• Estado: Sistema m√©dico operacional\n" \
                     f"üîß Test: Conexi√≥n b√°sica al canal #it_vigia\n\n" \
                     f"*Iniciando pruebas del sistema m√©dico...*"
            
            result = await self.slack_orchestrator.send_message(
                channel=self.test_channel,
                message=message
            )
            
            if result.get('ok'):
                print("‚úÖ Conexi√≥n b√°sica exitosa")
                return True
            else:
                print(f"‚ùå Error en conexi√≥n: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en conexi√≥n b√°sica: {e}")
            return False
    
    async def test_medical_block_kit(self):
        """Test 2: Block Kit m√©dico avanzado"""
        print("\nüèóÔ∏è TEST 2: Block Kit M√©dico Avanzado")
        
        try:
            # Create medical context
            batman_token = await self.phi_client.create_token_async(
                hospital_mrn="TEST_MRN_001",
                patient_data={"name": "Paciente Test", "age": 65}
            )
            
            context = MedicalBlockContext(
                batman_token=batman_token,
                session_id="test_session_real",
                timestamp=datetime.now(),
                medical_team=["Dr. Garc√≠a", "Enf. Martinez"],
                urgency_level="high",
                channel_context=self.test_channel
            )
            
            # Create LPP detection alert
            blocks = self.message_templates.create_lpp_detection_alert(
                context=context,
                lpp_grade=LPPGrade.GRADE_2,
                confidence=0.87,
                clinical_recommendation="Implementar protocolo de prevenci√≥n LPP Grado 2. Redistribuci√≥n de presi√≥n cada 2 horas.",
                evidence_level="A"
            )
            
            result = await self.slack_orchestrator.send_blocks(
                channel=self.test_channel,
                blocks=blocks
            )
            
            if result.get('ok'):
                print("‚úÖ Block Kit m√©dico enviado exitosamente")
                return True
            else:
                print(f"‚ùå Error en Block Kit: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en Block Kit m√©dico: {e}")
            return False
    
    async def test_voice_analysis_notification(self):
        """Test 3: Notificaci√≥n de an√°lisis de voz"""
        print("\nüéôÔ∏è TEST 3: An√°lisis de Voz M√©dico")
        
        try:
            batman_token = await self.phi_client.create_token_async(
                hospital_mrn="TEST_VOICE_001",
                patient_data={"name": "Paciente Voz Test", "condition": "dolor_cronico"}
            )
            
            context = MedicalBlockContext(
                batman_token=batman_token,
                session_id="voice_test_session",
                timestamp=datetime.now(),
                medical_team=["Dr. Pain Specialist", "Enf. Cuidados"],
                urgency_level="medium",
                channel_context=self.test_channel
            )
            
            # Voice analysis results
            voice_results = {
                "pain_level": "moderado",
                "stress_indicators": ["ansiedad", "tensi√≥n_vocal"],
                "emotional_state": "preocupado",
                "confidence": 0.92,
                "recommendations": [
                    "Evaluaci√≥n inmediata del dolor",
                    "Considerar ajuste de medicaci√≥n",
                    "Apoyo psicol√≥gico recomendado"
                ]
            }
            
            blocks = self.message_templates.create_voice_analysis_summary(
                context=context,
                voice_results=voice_results
            )
            
            result = await self.slack_orchestrator.send_blocks(
                channel=self.test_channel,
                blocks=blocks
            )
            
            if result.get('ok'):
                print("‚úÖ An√°lisis de voz enviado exitosamente")
                return True
            else:
                print(f"‚ùå Error en an√°lisis de voz: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en an√°lisis de voz: {e}")
            return False
    
    async def test_medical_team_coordination(self):
        """Test 4: Coordinaci√≥n de equipo m√©dico"""
        print("\nüë®‚Äç‚öïÔ∏è TEST 4: Coordinaci√≥n de Equipo M√©dico")
        
        try:
            batman_token = await self.phi_client.create_token_async(
                hospital_mrn="TEST_TEAM_001",
                patient_data={"name": "Paciente Coordinaci√≥n", "urgency": "high"}
            )
            
            context = MedicalBlockContext(
                batman_token=batman_token,
                session_id="team_coord_session",
                timestamp=datetime.now(),
                medical_team=["Dr. Rodriguez", "Enf. Supervisor", "Especialista LPP"],
                urgency_level="critical",
                channel_context=self.test_channel
            )
            
            # Team coordination alert
            coordination_data = {
                "alert_type": "team_coordination",
                "case_priority": "CR√çTICO",
                "required_specialists": ["Dermatolog√≠a", "Cirug√≠a Pl√°stica"],
                "estimated_response_time": "15 minutos",
                "escalation_level": "Nivel 2"
            }
            
            blocks = self.message_templates.create_team_coordination_alert(
                context=context,
                coordination_data=coordination_data
            )
            
            result = await self.slack_orchestrator.send_blocks(
                channel=self.test_channel,
                blocks=blocks
            )
            
            if result.get('ok'):
                print("‚úÖ Coordinaci√≥n de equipo enviada exitosamente")
                return True
            else:
                print(f"‚ùå Error en coordinaci√≥n: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en coordinaci√≥n de equipo: {e}")
            return False
    
    async def test_emergency_protocol(self):
        """Test 5: Protocolo de emergencia m√©dica"""
        print("\nüö® TEST 5: Protocolo de Emergencia M√©dica")
        
        try:
            batman_token = await self.phi_client.create_token_async(
                hospital_mrn="EMERGENCY_001",
                patient_data={"name": "Paciente Emergencia", "condition": "LPP_Grade_4"}
            )
            
            context = MedicalBlockContext(
                batman_token=batman_token,
                session_id="emergency_session",
                timestamp=datetime.now(),
                medical_team=["Dr. Urgencias", "Cirujano", "Enf. Intensiva"],
                urgency_level="emergency",
                channel_context=self.test_channel
            )
            
            # Emergency alert
            emergency_data = {
                "emergency_type": "LPP Grado 4",
                "location": "Regi√≥n sacra",
                "immediate_actions": [
                    "Aislamiento de presi√≥n inmediato",
                    "Evaluaci√≥n quir√∫rgica urgente",
                    "Protocolo de infecci√≥n"
                ],
                "team_response_required": True,
                "estimated_surgery_time": "2 horas"
            }
            
            blocks = self.message_templates.create_emergency_protocol_alert(
                context=context,
                emergency_data=emergency_data
            )
            
            result = await self.slack_orchestrator.send_blocks(
                channel=self.test_channel,
                blocks=blocks
            )
            
            if result.get('ok'):
                print("‚úÖ Protocolo de emergencia enviado exitosamente")
                return True
            else:
                print(f"‚ùå Error en protocolo de emergencia: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en protocolo de emergencia: {e}")
            return False
    
    async def test_comprehensive_workflow(self):
        """Test 6: Flujo de trabajo m√©dico completo"""
        print("\nüîÑ TEST 6: Flujo de Trabajo M√©dico Completo")
        
        try:
            # Create comprehensive medical case
            batman_token = await self.phi_client.create_token_async(
                hospital_mrn="WORKFLOW_001",
                patient_data={
                    "name": "Paciente Flujo Completo",
                    "age": 72,
                    "condition": "riesgo_alto_lpp",
                    "medical_history": ["diabetes", "movilidad_reducida"]
                }
            )
            
            # Send workflow summary
            workflow_message = f"""
üè• **FLUJO DE TRABAJO M√âDICO COMPLETO - VIGIA AI**

üîπ **Batman Token**: `{batman_token}`
üîπ **Paciente**: Flujo Completo (72 a√±os)
üîπ **Condici√≥n**: Alto riesgo LPP + Diabetes
üîπ **Timestamp**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìã **An√°lisis Realizado**:
‚úÖ Detecci√≥n de imagen (MONAI + YOLOv5)
‚úÖ An√°lisis de voz (Hume AI)
‚úÖ Evaluaci√≥n cl√≠nica (Agente Cl√≠nico)
‚úÖ Evaluaci√≥n de riesgo (Escala Braden)
‚úÖ Recomendaci√≥n de protocolo (NPUAP/EPUAP 2019)

üéØ **Resultados**:
‚Ä¢ **LPP Detectado**: Grado 1 (Eritema no blanqueable)
‚Ä¢ **Dolor Detectado**: Moderado (An√°lisis de voz)
‚Ä¢ **Riesgo Braden**: 14/23 (Alto riesgo)
‚Ä¢ **Protocolo**: Prevenci√≥n intensiva

‚ö° **Acciones Autom√°ticas**:
1. Notificaci√≥n a equipo m√©dico ‚úÖ
2. Escalaci√≥n a especialista LPP ‚úÖ
3. Programaci√≥n de seguimiento ‚úÖ
4. Registro en auditor√≠a m√©dica ‚úÖ

üîí **Cumplimiento**:
‚Ä¢ HIPAA: PHI tokenizado ‚úÖ
‚Ä¢ NPUAP 2019: Protocolo compliant ‚úÖ
‚Ä¢ Auditor√≠a: Trail completo ‚úÖ

*Sistema VIGIA Medical AI operando correctamente en canal #it_vigia*
"""
            
            result = await self.slack_orchestrator.send_message(
                channel=self.test_channel,
                message=workflow_message
            )
            
            if result.get('ok'):
                print("‚úÖ Flujo de trabajo completo enviado exitosamente")
                return True
            else:
                print(f"‚ùå Error en flujo completo: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en flujo de trabajo completo: {e}")
            return False
    
    async def run_all_tests(self):
        """Ejecutar todas las pruebas en secuencia"""
        print("üöÄ INICIANDO PRUEBAS REALES DE VIGIA MEDICAL AI EN #it_vigia")
        print("=" * 70)
        
        # Initialize
        if not await self.initialize():
            print("‚ùå No se pudo inicializar el sistema. Abortando pruebas.")
            return False
        
        # Run tests
        tests = [
            ("Conexi√≥n B√°sica", self.test_basic_connection),
            ("Block Kit M√©dico", self.test_medical_block_kit),
            ("An√°lisis de Voz", self.test_voice_analysis_notification),
            ("Coordinaci√≥n de Equipo", self.test_medical_team_coordination),
            ("Protocolo de Emergencia", self.test_emergency_protocol),
            ("Flujo Completo", self.test_comprehensive_workflow)
        ]
        
        results = []
        for test_name, test_func in tests:
            try:
                result = await test_func()
                results.append((test_name, result))
                
                # Delay between tests
                await asyncio.sleep(2)
                
            except Exception as e:
                print(f"‚ùå Error en {test_name}: {e}")
                results.append((test_name, False))
        
        # Summary
        print("\n" + "=" * 70)
        print("üìä RESUMEN DE PRUEBAS REALES EN #it_vigia")
        print("=" * 70)
        
        successful = 0
        for test_name, success in results:
            status = "‚úÖ EXITOSO" if success else "‚ùå FALLIDO"
            print(f"{test_name:.<30} {status}")
            if success:
                successful += 1
        
        print(f"\nüéØ RESULTADO FINAL: {successful}/{len(results)} pruebas exitosas")
        
        if successful == len(results):
            print("üèÜ ¬°TODAS LAS PRUEBAS EXITOSAS! Sistema VIGIA listo para producci√≥n.")
        else:
            print("‚ö†Ô∏è Algunas pruebas fallaron. Revisar logs para detalles.")
        
        return successful == len(results)

async def main():
    """Main execution"""
    tester = VigiaSlackRealTester()
    success = await tester.run_all_tests()
    
    if success:
        print("\nüéâ ¬°SISTEMA VIGIA MEDICAL AI COMPLETAMENTE OPERACIONAL!")
        print("üì± Canal #it_vigia validado para notificaciones m√©dicas")
        print("üè• Listo para deployment en producci√≥n")
    else:
        print("\n‚ö†Ô∏è Sistema requiere ajustes antes de producci√≥n")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())