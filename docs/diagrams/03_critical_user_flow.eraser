# VIGIA Medical AI - AWS Serverless Critical User Flow

## Objetivo
Happy path serverless: paciente envía imagen → API Gateway → Step Functions coordina 9 Lambda agents → DynamoDB state → equipo médico vía Slack → autonomos.dev response.

## Código Eraser.io
```
autoNumber on
colorMode bold

// AWS Serverless Actors
Patient [icon: user, color: blue]  
WhatsApp_Bot [icon: mobile, color: green]
API_Gateway [icon: aws-apigateway, color: purple]
Lambda_PHI_Tokenizer [icon: aws-lambda, color: red]
Step_Functions_Orchestrator [icon: aws-stepfunctions, color: purple]
Lambda_Medical_Agents [icon: aws-lambda, color: blue]
AWS_Bedrock_MONAI [icon: aws-bedrock, color: green]
DynamoDB_State [icon: aws-dynamodb, color: orange]
Medical_Team [icon: users, color: orange]
Lambda_Slack_Integration [icon: slack, color: purple]

// Phase 1: Patient Input & AWS Serverless Processing
Patient > WhatsApp_Bot: "🖼️ Pressure ulcer image\n📝 MRN: BW-2025-001"
activate WhatsApp_Bot
WhatsApp_Bot > API_Gateway: "🌐 autonomos.dev/medical/analyze"
activate API_Gateway
API_Gateway > Lambda_PHI_Tokenizer: "☁️ Lambda cold start (2s)\n🔒 Patient data validation"
activate Lambda_PHI_Tokenizer
Lambda_PHI_Tokenizer > DynamoDB_State: "Bruce Wayne → Batman token\nbatman_TC001_abc123"
activate DynamoDB_State
DynamoDB_State > Lambda_PHI_Tokenizer: "✅ Token stored\n⏱️ 15min session TTL"
deactivate DynamoDB_State
Lambda_PHI_Tokenizer > API_Gateway: "✅ Token created\n🔐 KMS encrypted"
deactivate Lambda_PHI_Tokenizer
API_Gateway > WhatsApp_Bot: "✅ AWS processing initiated"
deactivate API_Gateway
WhatsApp_Bot > Patient: "✅ Image received\n☁️ AWS medical analysis starting..."
deactivate WhatsApp_Bot

// Phase 2: Step Functions Medical Orchestration
activate Step_Functions_Orchestrator
Step_Functions_Orchestrator > Lambda_Medical_Agents: "🔄 Step Functions workflow\n🚀 9-agent Lambda coordination"
activate Lambda_Medical_Agents

// Parallel AWS Medical Analysis
par [label: "Step Functions Parallel Execution"] {
  Lambda_Medical_Agents > AWS_Bedrock_MONAI: "🔬 Bedrock + SageMaker MONAI analysis"
  activate AWS_Bedrock_MONAI
  AWS_Bedrock_MONAI > Lambda_Medical_Agents: "📊 MONAI: Grade 4 LPP detected\n🎯 Confidence: 94%"
  deactivate AWS_Bedrock_MONAI
}
and {
  Lambda_Medical_Agents > DynamoDB_State: "🩺 Clinical assessment state\n⚠️ Risk factors analysis"
  activate DynamoDB_State
  DynamoDB_State > Lambda_Medical_Agents: "✅ State updated"
  deactivate DynamoDB_State
}
and {
  Lambda_Medical_Agents > Lambda_Medical_Agents: "📋 NPUAP protocol Lambda\n📖 Evidence-based recommendations"
}

Lambda_Medical_Agents > Step_Functions_Orchestrator: "🚨 CRITICAL: Grade 4 LPP\n⏰ Step Functions: surgical evaluation required"
deactivate Lambda_Medical_Agents
Step_Functions_Orchestrator > DynamoDB_State: "💾 Final medical state stored"
activate DynamoDB_State
DynamoDB_State > Step_Functions_Orchestrator: "✅ Audit trail complete"
deactivate DynamoDB_State
deactivate Step_Functions_Orchestrator

// Phase 3: Lambda Slack Medical Team Communication
activate Lambda_Slack_Integration
Lambda_Slack_Integration > Medical_Team: "🚨 URGENT MEDICAL ALERT\n👤 Patient: batman_TC001\n📊 Grade 4 LPP detected\n🎯 Confidence: 94%\n☁️ Source: AWS Lambda analysis\n⏰ Response needed: <15min"
activate Medical_Team
Medical_Team > Lambda_Slack_Integration: "✅ Dr. Smith reviewing\n📞 Contacting patient now"
Lambda_Slack_Integration > DynamoDB_State: "👨‍⚕️ Dr. Smith response logged"
activate DynamoDB_State
DynamoDB_State > Lambda_Slack_Integration: "✅ Response tracked"
deactivate DynamoDB_State
deactivate Medical_Team
Lambda_Slack_Integration > Step_Functions_Orchestrator: "✅ Medical team notified\n👨‍⚕️ Dr. Smith responding"
deactivate Lambda_Slack_Integration

// Phase 4: Patient Response via autonomos.dev
activate WhatsApp_Bot
WhatsApp_Bot > Patient: "🏥 URGENT MEDICAL ALERT\n📊 Grade 4 pressure injury detected\n👨‍⚕️ Dr. Smith will contact you\n📞 Call: (555) 123-4567\n🌐 Track: autonomos.dev\n⏰ Immediate evaluation required"
Patient > WhatsApp_Bot: "✅ Understood, thank you"
WhatsApp_Bot > API_Gateway: "🌐 autonomos.dev case reference\n📋 Reference: batman_TC001"
activate API_Gateway
API_Gateway > DynamoDB_State: "📝 Patient acknowledgment logged"
activate DynamoDB_State
DynamoDB_State > API_Gateway: "✅ Final state updated"
deactivate DynamoDB_State
API_Gateway > WhatsApp_Bot: "✅ Case logged in AWS"
deactivate API_Gateway
WhatsApp_Bot > Patient: "✅ Medical case logged\n📋 Reference: batman_TC001\n🌐 Status: autonomos.dev"
deactivate WhatsApp_Bot

// AWS Serverless Audit Trail
note over Lambda_PHI_Tokenizer, Lambda_Slack_Integration: "📝 Complete DynamoDB audit trail\n🔒 AWS KMS HIPAA compliance\n☁️ Step Functions workflow logged\n⏱️ Total serverless response: <3 minutes"
```

## Notas Clave
- **Sub-3 minutos serverless**: AWS Lambda + Step Functions response time
- **9 Lambda Agents**: Step Functions coordina análisis médico paralelo
- **AWS AI Stack**: Bedrock + SageMaker MONAI para Grade 4 LPP detection
- **DynamoDB State Management**: Complete audit trail con KMS encryption
- **Production Domain**: autonomos.dev tracking con API Gateway integration
- **HIPAA Serverless**: AWS KMS, DynamoDB encryption, Lambda execution roles

## Para Editar
1. Copia el código anterior
2. Ve a [eraser.io](https://eraser.io)
3. Crea nuevo diagrama → Diagram-as-code
4. Pega el código y edita