[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "vigia-medical-ai"
version = "1.0.0"
description = "VIGIA Medical AI - Production-grade pressure injury detection system"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Autonomos AiLab", email = "contact@autonomos-ailab.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Medical Science Apps",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.110.2",
    "uvicorn[standard]>=0.29.0",
    "gradio>=4.20.0",
    "torch>=2.3.0",
    "torchvision>=0.18.0",
    "monai>=1.3.0",
    "opencv-python>=4.9.0",
    "pillow>=10.3.0",
    "numpy>=1.24.0",
    "pandas>=2.2.0",
    "supabase>=2.4.2",
    "redis>=5.0.4",
    "celery>=5.3.6",
    "twilio>=9.0.4",
    "slack-sdk>=3.27.1",
    "google-cloud-aiplatform>=1.51.0",
    "cryptography>=42.0.5",
    "pydantic>=2.7.0",
    "python-multipart>=0.0.9",
    "python-dotenv>=1.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.1.1",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.6",
    "black>=24.4.0",
    "isort>=5.13.2",
    "pylint>=3.1.0",
    "mypy>=1.9.0",
    "pre-commit>=3.7.0",
]
medical = [
    "scikit-learn>=1.4.2",
    "scipy>=1.13.0",
    "matplotlib>=3.8.4",
    "seaborn>=0.13.2",
    "jupyter>=1.0.0",
    "ipywidgets>=8.1.2",
]

[project.urls]
Homepage = "https://github.com/autonomos-ailab/vigia-medical-ai"
Documentation = "https://github.com/autonomos-ailab/vigia-medical-ai/docs"
Repository = "https://github.com/autonomos-ailab/vigia-medical-ai"
Issues = "https://github.com/autonomos-ailab/vigia-medical-ai/issues"

[tool.setuptools]
packages = ["src"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | storage
  | logs
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests", "scripts"]
known_first_party = ["src", "config"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Medical code is gradually typed
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "cv2.*",
    "gradio.*",
    "monai.*",
    "supabase.*",
    "twilio.*",
    "slack_sdk.*",
    "google.cloud.*",
    "celery.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --tb=short"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
    "*Test",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "medical: marks tests as medical functionality tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"