[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "vigia-medical-ai"
version = "1.0.0"
description = "VIGIA Medical AI - Production-grade pressure injury detection system"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Autonomos AiLab", email = "contact@autonomos-ailab.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Medical Science Apps",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"
dependencies = [
    # Core FastAPI Web Interface
    "fastapi>=0.110.2",
    "uvicorn[standard]>=0.29.0",
    "jinja2>=3.1.2",
    "python-multipart>=0.0.9",
    "pydantic>=2.7.0",
    "mangum>=0.17.0",
    
    # Medical AI Stack (9-Agent Architecture)
    "torch>=2.3.0",
    "torchvision>=0.18.0",
    "torchaudio>=2.3.0",
    "transformers>=4.36.0",
    "monai>=1.3.0",
    "yolov5>=7.0.13",
    "huggingface-hub>=0.21.0",
    "datasets>=2.18.0",
    "opencv-python>=4.9.0",
    "pillow>=10.3.0",
    
    # Medical Data Processing
    "pandas>=2.2.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.4.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    
    # Database & Storage (HIPAA Compliance)
    "supabase>=2.4.2",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.4",
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    
    # Background Processing (Medical Workflows)
    "celery>=5.3.6",
    "flower>=2.0.0",
    
    # Security & PHI Tokenization
    "cryptography>=42.0.5",
    "python-jose[cryptography]>=3.3.0",
    "python-dotenv>=1.0.1",
    "pycryptodome>=3.19.0",
    
    # Communication (Patient + Medical Team)
    "twilio>=9.0.4",
    "slack-sdk>=3.27.1",
    "python-telegram-bot>=20.0.0",
    "hume>=0.4.0",
    
    # Async & Networking
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "asyncio>=3.4.3",
    "websockets>=11.0.0",
    
    # Vector Database & Medical Knowledge
    "faiss-cpu>=1.7.0",
    "chromadb>=0.4.0",
    "llama-index>=0.9.0",
    
    # Medical Standards & Validation
    "pydantic-settings>=2.0.0",
    "email-validator>=2.0.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    
    # Cloud AI Services
    "google-cloud-aiplatform>=1.51.0",
    
    # Monitoring & Logging
    "structlog>=23.0.0",
    "loguru>=0.7.0",
    "agentops>=0.3.18",
    
    # AWS Integration
    "aws-cdk-lib>=2.100.0",
    "aws-lambda-powertools>=2.25.0",
    "aws-xray-sdk>=2.12.0",
    
    # Legacy UI (keeping for compatibility)
    "gradio>=4.20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.1.1",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.6",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "ruff>=0.1.0",
    "black>=24.4.0",
    "mypy>=1.9.0",
    "pre-commit>=3.7.0",
    "ipython>=8.15.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
]
medical = [
    "scikit-learn>=1.4.2",
    "scipy>=1.13.0",
    "matplotlib>=3.8.4",
    "seaborn>=0.13.2",
    "jupyter>=1.0.0",
    "ipywidgets>=8.1.2",
    "nibabel>=5.0.0",
    "pydicom>=2.4.0",
    "simpleitk>=2.3.0",
    "medpy>=0.4.0",
    "radiomics>=3.1.0",
    "plotly>=5.17.0",
    "dash>=2.14.0",
]
aws = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "aws-cdk-lib>=2.100.0",
    "aws-lambda-powertools>=2.25.0",
    "aws-xray-sdk>=2.12.0",
    "awscli>=1.32.0",
]

[project.urls]
"Homepage" = "https://github.com/autonomos-ai/vigia-medical-ai"
"Bug Tracker" = "https://github.com/autonomos-ai/vigia-medical-ai/issues"
"Documentation" = "https://docs.autonomos.ai/vigia"
"Source Code" = "https://github.com/autonomos-ai/vigia-medical-ai"

[project.scripts]
vigia-web = "src.web.main:main"
vigia-medical-demo = "demo.launch_medical_demo:main"
vigia-setup = "scripts.setup_medgemma_ollama:main"
vigia-validate = "scripts.validate_medical_system:main"

[tool.setuptools]
packages = ["src"]

[tool.ruff]
line-length = 100
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",  # flake8-quotes
    "FBT", # flake8-boolean-trap
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "T20", # flake8-print
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "PD",  # pandas-vet
    "PERF", # Perflint
    "PL",  # Pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit (security)
]
ignore = [
    "E501",  # line too long - handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex - medical code can be complex
    "PLR0913", # too many arguments - medical functions need many params
    "PLR0915", # too many statements - medical processing is complex
    "S101",  # use of assert - common in medical validation
    "S603",  # subprocess call - needed for medical tools
    "S607",  # partial executable path - medical tools may have this
    "TRY003", # long exception message - medical errors need detail
    "EM101", # string in exception - medical errors need context
    "EM102", # f-string in exception - medical errors need dynamic info
    "PGH003", # blanket type ignore - sometimes needed for medical libs
    "PLR2004", # magic value - medical constants are often numeric
    "S311",  # pseudo-random generators - acceptable for medical demos
    "PLR0912", # too many branches - medical decision trees are complex
    "PLR0911", # too many return statements - medical validation needs this
    "C416",  # unnecessary comprehension - medical code prioritizes clarity
    "SIM108", # use ternary operator - medical code prioritizes clarity
    "PD901", # avoid vague variable names - 'df' is standard in medical data
    "ARG001", # unused function argument - medical interfaces need consistency
    "ARG002", # unused method argument - medical interfaces need consistency
    "FBT001", # boolean positional argument - medical flags are common
    "FBT002", # boolean default argument - medical configuration needs this
    "UP007", # use X | Y syntax - medical code may use older union syntax
    "COM812", # trailing comma - handled by formatter
    "ISC001", # single line implicit string concatenation - handled by formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "SLF001", "ARG001", "FBT001", "PT011"]
"scripts/*" = ["T201", "S602", "S603", "S607", "PLR0913"]
"demo/*" = ["T201", "S602", "S603", "PLR0913"]
"src/synthetic/*" = ["S311", "PLR2004"]  # Synthetic data generation uses randomness
"src/cv_pipeline/*" = ["PLR0913", "C901"]  # Computer vision code is complex
"src/agents/*" = ["PLR0913", "C901", "PLR0915"]  # Agent coordination is complex

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
known-first-party = ["src"]
known-third-party = ["fastapi", "torch", "transformers", "monai", "boto3"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | storage
  | logs
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Medical libraries may not have complete type annotations
[[tool.mypy.overrides]]
module = [
    "monai.*",
    "yolov5.*",
    "hume.*",
    "radiomics.*",
    "medpy.*",
    "nibabel.*",
    "pydicom.*",
    "simpleitk.*",
    "cv2.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "dash.*",
    "gradio.*",
    "supabase.*",
    "twilio.*",
    "slack_sdk.*",
    "telegram.*",
    "celery.*",
    "flower.*",
    "google.cloud.*",
    "redis.*",
    "torch.*",
    "torchvision.*",
    "transformers.*",
    "datasets.*",
    "chromadb.*",
    "llama_index.*",
    "faiss.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "medical: marks tests as medical functionality tests",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "aws: marks tests as AWS integration tests",
    "agents: marks tests as agent coordination tests",
    "security: marks tests as security/HIPAA compliance tests",
    "api: marks tests as API tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/demo/*",
    "*/scripts/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"